export declare const enum NodeType {
    RAW = -1,
    ELEMENT_NODE = 1,
    ATTRIBUTE_NODE = 2,
    TEXT_NODE = 3,
    CDATA_SECTION_NODE = 4,
    ENTITY_REFERENCE_NODE = 5,
    ENTITY_NODE = 6,
    PROCESSING_INSTRUCTION_NODE = 7,
    COMMENT_NODE = 8,
    DOCUMENT_NODE = 9,
    DOCUMENT_TYPE_NODE = 10,
    DOCUMENT_FRAGMENT_NODE = 11,
    NOTATION_NODE = 12,
}
export default class Node {
    nodeType: NodeType;
    nodeName: string;
    nodeValue: string | null;
    static ELEMENT_NODE: NodeType;
    static ATTRIBUTE_NODE: NodeType;
    static TEXT_NODE: NodeType;
    static CDATA_SECTION_NODE: NodeType;
    static ENTITY_REFERENCE_NODE: NodeType;
    static ENTITY_NODE: NodeType;
    static PROCESSING_INSTRUCTION_NODE: NodeType;
    static COMMENT_NODE: NodeType;
    static DOCUMENT_NODE: NodeType;
    static DOCUMENT_TYPE_NODE: NodeType;
    static DOCUMENT_FRAGMENT_NODE: NodeType;
    static NOTATION_NODE: NodeType;
    parentNode: Node | null;
    previousSibling: Node | null;
    nextSibling: Node | null;
    firstChild: Node | null;
    lastChild: Node | null;
    private _childNodes;
    constructor(nodeType: NodeType, nodeName: string, nodeValue: string | null);
    readonly childNodes: {
        item(index: number): Node | null;
    };
    cloneNode(deep: true): Node;
    appendChild(node: Node): Node;
    insertBefore(node: Node, refNode: Node | null): Node | undefined;
    removeChild(refNode: Node): void;
    protected _cloneNode(): Node;
}
